/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "BeamAsym.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(BeamAsym) 

 BeamAsym::BeamAsym(const char *name, const char *title, 
                        RooAbsReal& _phiSigma,
                        RooAbsReal& _pol,
                        RooAbsCategory& _polState,
                        RooAbsReal& _beamAsym) :
   RooHSEventsPDF(name,title),
   phiSigma("phiSigma","phiSigma",this,_phiSigma),
   pol("pol","pol",this,_pol),
   polState("polState","polState",this,_polState),
   beamAsym("beamAsym","beamAsym",this,_beamAsym)
 { 
   MakeSets();
   phiSigma.SetName(_phiSigma.GetName());
   pol.SetName(_pol.GetName());
   polState.SetName(_polState.GetName());
   beamAsym.SetName(_beamAsym.GetName());
 } 


 BeamAsym::BeamAsym(const BeamAsym& other, const char* name) :  
   RooHSEventsPDF(other,name),
   phiSigma("phiSigma",this,other.phiSigma),
   pol("pol",this,other.pol),
   polState("polState",this,other.polState),
   beamAsym("beamAsym",this,other.beamAsym)
 { 
   MakeSets();
   phiSigma.SetName(other.phiSigma.GetName());
   pol.SetName(other.pol.GetName());
   polState.SetName(other.polState.GetName());
   beamAsym.SetName(other.beamAsym.GetName());
   if(fEvTree) SetEvTree(fEvTree,fCut);//Needs fProxSet filled first
 } 
void BeamAsym::MakeSets(){
   fProxSet.push_back(&phiSigma);
   fProxSet.push_back(&pol);
   fCatSet.push_back(&polState);
   fParSet.push_back(&beamAsym);
   InitSets();
}



 Double_t BeamAsym::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   Double_t W = 1 - polState*pol*beamAsym*TMath::Cos(2.0*phiSigma);
   
   if (W<=0) W=1.0e-12;
   
   return W; 
 } 

Double_t BeamAsym::evaluateMC(const vector<Float_t> *vars,const  vector<Int_t> *cats) const {
// ENTER IDENTICAL EXPRESSION TO evaluate() IN TERMS OF MC VARIABLE ARGUMENTS HERE
   Double_t mcphiSigma=(*vars)[fTreeEntry*fNvars+0];
   Double_t mcpol=(*vars)[fTreeEntry*fNvars+3];
   Int_t mcpolState=(*cats)[fTreeEntry*fNcats+0];
   
   Double_t W = 1 - mcpolState*mcpol*beamAsym*TMath::Cos(2.0*mcphiSigma);
   
   if (W<=0) W=1.0E-12;

   return W;   
}


