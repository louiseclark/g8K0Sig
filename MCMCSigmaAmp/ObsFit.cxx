/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "ObsFit.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ObsFit); 

 ObsFit::ObsFit(const char *name, const char *title, 
                        RooAbsReal& _phiK0,
                        RooAbsReal& _pol,
                        RooAbsCategory& _polState,
                        RooAbsReal& _B) :
   HS::FIT::RooHSEventsPDF(name,title),
   phiK0("phiK0","phiK0",this,_phiK0),
   pol("pol","pol",this,_pol),
   polState("polState","polState",this,_polState),
   B("B","B",this,_B)
 { 
   MakeSets();
   phiK0.SetName(_phiK0.GetName());
   pol.SetName(_pol.GetName());
   polState.SetName(_polState.GetName());
   B.SetName(_B.GetName());
 } 


 ObsFit::ObsFit(const ObsFit& other, const char* name) :  
   HS::FIT::RooHSEventsPDF(other,name),
   phiK0("phiK0",this,other.phiK0),
   pol("pol",this,other.pol),
   polState("polState",this,other.polState),
   B("B",this,other.B)
 { 
   MakeSets();
   phiK0.SetName(other.phiK0.GetName());
   pol.SetName(other.pol.GetName());
   polState.SetName(other.polState.GetName());
   B.SetName(other.B.GetName());
   if(fEvTree) SetEvTree(fEvTree,fCut);//Needs fProxSet filled first
 } 
void ObsFit::MakeSets(){
   fProxSet.push_back(&phiK0);
   fProxSet.push_back(&pol);
   fCatSet.push_back(&polState);
   fParSet.push_back(&B);
   InitSets();
}



 Double_t ObsFit::evaluate() const 
 { 
   Double_t g=B*TMath::Cos(2*(phiK0));
   Double_t f=1;

   Double_t result=f-pol*polState*g;
   //if (result<0) result=1.0; //1.0e-12;
   return result;  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

 } 

Double_t ObsFit::evaluateMC(const vector<Float_t> *vars,const  vector<Int_t> *cats) const {
// ENTER IDENTICAL EXPRESSION TO evaluate() IN TERMS OF MC VARIABLE ARGUMENTS HERE
  Double_t mcphiK0=(*vars)[fTreeEntry*fNvars+0];
  Double_t mcpol=(*vars)[fTreeEntry*fNvars+4];
  Int_t mcpolState=(*cats)[fTreeEntry*fNcats+0];
  
   Double_t g=B*TMath::Cos(2*(mcphiK0));
   Double_t f=1;

   Double_t result = f-mcpol*mcpolState*g;
   return result; 
}


